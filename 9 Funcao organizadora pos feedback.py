# -*- coding: utf-8 -*-
"""Untitled7.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1x3-55rkxQL2yhuB9asVYPJuihUT9oNaY
"""

import re

def organizar_biblioteca_digital(nomes_arquivos):
    """
    Organiza uma coleção de nomes de arquivos digitais, categorizando-os por tipo (extensão)
    e, em seguida, por ano de publicação.

    Args:
        nomes_arquivos (list): Uma lista de strings, onde cada string é o nome de um arquivo.

    Returns:
        dict: Um dicionário aninhado que organiza os arquivos.
              Estrutura esperada:
              {
                  'Categoria do Arquivo': {
                      'extensao_do_arquivo': {
                          ano_publicacao: ['nome_do_arquivo1', 'nome_do_arquivo2'],
                          'sem_ano': ['nome_do_arquivo_sem_ano']
                      }
                  },
                  ...
              }
    """
    # Mapeamento de extensões para categorias (incorporando categorias específicas como sugerido)
    mapa_extensoes_categorias = {
        'pdf': "Documentos de Texto/Leitura", 'epub': "Documentos de Texto/Leitura",
        'mobi': "Documentos de Texto/Leitura", 'doc': "Documentos de Texto/Leitura",
        'docx': "Documentos de Texto/Leitura", 'txt': "Documentos de Texto/Leitura",
        'rtf': "Documentos de Texto/Leitura", 'odt': "Documentos de Texto/Leitura",
        'html': "Documentos de Texto/Leitura", 'xml': "Documentos de Texto/Leitura",
        'md': "Documentos de Texto/Leitura", # Markdown

        'jpg': "Imagens", 'jpeg': "Imagens", 'png': "Imagens", 'gif': "Imagens",
        'tiff': "Imagens", 'bmp': "Imagens", 'svg': "Imagens",

        'mp3': "Áudio", 'wav': "Áudio", 'aac': "Áudio", 'flac': "Áudio", 'ogg': "Áudio",

        'mp4': "Vídeo", 'avi': "Vídeo", 'mov': "Vídeo", 'wmv': "Vídeo", 'flv': "Vídeo",

        'xls': "Dados/Planilhas", 'xlsx': "Dados/Planilhas", 'csv': "Dados/Planilhas",
        'json': "Dados/Planilhas", 'sqlite': "Dados/Planilhas",

        'ppt': "Apresentações", 'pptx': "Apresentações", 'odp': "Apresentações",

        'py': "Programação/Código", 'java': "Programação/Código", 'c': "Programação/Código",
        'cpp': "Programação/Código", 'h': "Programação/Código", 'sh': "Programação/Código",
        'r': "Programação/Código", 'js': "Programação/Código", 'css': "Programação/Código",

        'zip': "Compactados", 'rar': "Compactados", '7z': "Compactados", 'tar': "Compactados",
        'gz': "Compactados",

        # Categorias específicas adicionadas/confirmadas
        'psd': "Outros/Design",
        'ai':  "Outros/Design",
        'dwg': "Outros/Engenharia/CAD",
        'log': "Outros/Log"
    }

    biblioteca_organizada = {}

    for nome_arquivo in nomes_arquivos:
        # Extrair a extensão
        partes_nome = nome_arquivo.split('.')
        if len(partes_nome) < 2:
            continue # Ignora arquivos sem extensão
        extensao = partes_nome[-1].lower()

        # Obter a categoria do arquivo
        categoria = mapa_extensoes_categorias.get(extensao, "Outros/Diversos")

        # Extrair o ano de publicação (extração mais inteligente como sugerido por Pedro)
        ano_publicacao = None
        # Procura por 4 dígitos que são uma "palavra" completa ou precedidos/seguidos por delimitadores comuns
        match_ano = re.search(r'\b(\d{4})\b', nome_arquivo) # Busca por limite de palavra
        if not match_ano:
            # Tenta pegar padrões como _YYYY.ext ou -YYYY- ou (YYYY)
            match_ano = re.search(r'[_-](\d{4})[._-]?|\((\d{4})\)', nome_arquivo)
            if match_ano and match_ano.group(1): # Pega o primeiro grupo de captura (para [_-](\d{4})[._-]? )
                ano_str = match_ano.group(1)
            elif match_ano and match_ano.group(2): # Pega o segundo grupo de captura (para (\d{4}) )
                ano_str = match_ano.group(2)
            else:
                ano_str = None
        else:
            ano_str = match_ano.group(1) # Pega o primeiro grupo de captura da regex inicial

        if ano_str:
            try:
                ano_publicacao = int(ano_str)
                # Opcional: Adicionar verificação de range do ano para evitar datas absurdas
                if not (1800 <= ano_publicacao <= 2099): # Range razoável para anos de publicação
                    ano_publicacao = None # Ignora se estiver fora do range
            except ValueError:
                pass # Caso a extração não seja um número válido

        # Inicializar a estrutura se necessário
        if categoria not in biblioteca_organizada:
            biblioteca_organizada[categoria] = {}
        if extensao not in biblioteca_organizada[categoria]:
            biblioteca_organizada[categoria][extensao] = {}

        # Adicionar o arquivo ao ano ou 'sem_ano'
        if ano_publicacao:
            if ano_publicacao not in biblioteca_organizada[categoria][extensao]:
                biblioteca_organizada[categoria][extensao][ano_publicacao] = []
            biblioteca_organizada[categoria][extensao][ano_publicacao].append(nome_arquivo)
        else:
            if 'sem_ano' not in biblioteca_organizada[categoria][extensao]:
                biblioteca_organizada[categoria][extensao]['sem_ano'] = []
            biblioteca_organizada[categoria][extensao]['sem_ano'].append(nome_arquivo)

    return biblioteca_organizada

def exibir_biblioteca_organizada(biblioteca_organizada, titulo="Documentos da Biblioteca"):
    """Imprime o dicionário da biblioteca organizada de forma legível."""
    if not biblioteca_organizada:
        print(f"\nNenhum documento encontrado para exibição em '{titulo}'.")
        return

    print(f"\n--- {titulo} ---")
    for categoria, extensoes_dict in sorted(biblioteca_organizada.items()):
        print(f"\n## {categoria}:")
        for extensao, anos_dict in sorted(extensoes_dict.items()):
            print(f"  Extensão: .{extensao}")
            anos_ordenados = sorted([ano for ano in anos_dict.keys() if ano != 'sem_ano'])
            if 'sem_ano' in anos_dict:
                anos_ordenados.append('sem_ano') # Coloca 'sem_ano' por último

            for ano in anos_ordenados:
                if ano == 'sem_ano':
                    print(f"    - Sem Ano de Publicação:")
                else:
                    print(f"    - Ano: {ano}:")
                for documento in anos_dict[ano]:
                    print(f"      * {documento}")
    print("-" * 30)

def filtrar_documentos_por_palavra_chave(nomes_arquivos, palavra_chave):
    """
    Filtra uma lista de nomes de arquivos com base em uma palavra-chave (case-insensitive).
    (Sugestão de Ana Clara)
    """
    if not palavra_chave:
        return nomes_arquivos # Retorna todos se a palavra-chave for vazia

    palavra_chave_lower = palavra_chave.lower()
    return [
        nome_arquivo for nome_arquivo in nomes_arquivos
        if palavra_chave_lower in nome_arquivo.lower()
    ]

# --- Exemplo de Uso com dados originais e demonstração de busca ---

meus_documentos_de_exemplo = [
    'Artigo_Neurociencia_Cognitiva_2023.pdf',
    'Revisao_Literatura_Inteligencia_Artificial_IEEE.pdf',
    'Impacto_Mudancas_Climaticas_Agricultura_2021.pdf',
    'Analise_Dados_Big_Data_Jornal_Cientifico_XYZ.pdf',
    'Pesquisa_Qualitativa_Educacao_Revista_Pedagogia_Aplicada_2022.pdf',
    'Metodos_Estatisticos_Ciencias_Sociais_2024.pdf',
    'Desafios_Desenvolvimento_Sustentavel_Artigo_Conferencia.pdf',
    'Tese_Doutorado_Otimizacao_Sistemas_Energeticos_2022.pdf',
    'Dissertacao_Mestrado_Uso_Tecnologia_Educacao_2023.pdf',
    'Tese_Analise_Literaria_Romantismo_Brasileiro_USP.pdf',
    'Dissertacao_Modelagem_Computacional_Farmacologia_2021.pdf',
    'Tese_Impacto_Redes_Sociais_Saude_Mental_2024.pdf',
    'Livro_Introducao_Programacao_Python_2ed_2020.pdf',
    'Historia_Filosofia_Ocidental_Vol_1.epub',
    'Guia_Completo_Marketing_Digital_2019.mobi',
    'Manual_Psicologia_Desenvolvimento.pdf',
    'Fisica_Quantica_Para_Iniciantes.epub',
    'Romance_Classico_Aventura_No_Mar_1985.pdf',
    'Economia_Global_Perspectivas_Futuras_2023.pdf',
    'Culinaria_Regional_Receitas_Tradicionais.pdf',
    'Audio_Aula_Historia_Medicina_2020.mp3',
    'Video_Seminario_Ciencias_Ambientais_2021.mp4',
    'Dados_Pesquisa_Populacional_2022.xlsx',
    'Apresentacao_Projeto_Final_2023.pptx',
    'Código_Fonte_Modelo_Estatistico.py',
    'Relatorio_Anual_Financas_2024.doc',
    'Resumo_Conferencia_Internacional.txt',
    'Imagem_Historica_Cidade_1890.jpg',
    'Dados_Experimento_Quimica_2023.csv',
    'Projeto_Software_Versao_1.0.zip'
]

# 1. Organizar e exibir todos os documentos
biblioteca_completa_organizada = organizar_biblioteca_digital(meus_documentos_de_exemplo)
exibir_biblioteca_organizada(biblioteca_completa_organizada, "Todos os Documentos")

# 2. Demonstrar a busca por palavra-chave (feedback de Ana Clara)
termo_busca = "Inteligencia"
documentos_filtrados = filtrar_documentos_por_palavra_chave(meus_documentos_de_exemplo, termo_busca)
biblioteca_filtrada_organizada = organizar_biblioteca_digital(documentos_filtrados)
exibir_biblioteca_organizada(biblioteca_filtrada_organizada, f"Documentos com a Palavra-Chave '{termo_busca}'")

termo_busca_2 = "2023"
documentos_filtrados_2 = filtrar_documentos_por_palavra_chave(meus_documentos_de_exemplo, termo_busca_2)
biblioteca_filtrada_organizada_2 = organizar_biblioteca_digital(documentos_filtrados_2)
exibir_biblioteca_organizada(biblioteca_filtrada_organizada_2, f"Documentos com a Palavra-Chave '{termo_busca_2}'")
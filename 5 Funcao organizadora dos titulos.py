# -*- coding: utf-8 -*-
"""Untitled5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ExpxzWZTWVgJ2ixsH_eodoQs7vc9TzYK
"""

import re

def organizar_biblioteca_digital(nomes_arquivos):
    """
    Organiza uma coleção de nomes de arquivos digitais, categorizando-os por tipo (extensão)
    e, em seguida, por ano de publicação.

    Args:
        nomes_arquivos (list): Uma lista de strings, onde cada string é o nome de um arquivo.
                               Ex: ['Artigo_Neurociencia_Cognitiva_2023.pdf', 'Livro_Historia_2020.epub']

    Returns:
        dict: Um dicionário aninhado que organiza os arquivos.
              Estrutura esperada:
              {
                  'Categoria do Arquivo': {
                      'extensao_do_arquivo': {
                          ano_publicacao: ['nome_do_arquivo1', 'nome_do_arquivo2'],
                          'sem_ano': ['nome_do_arquivo_sem_ano']
                      }
                  },
                  ...
              }
    """
    # Mapeamento de extensões para categorias (similar ao exemplo anterior)
    mapa_extensoes_categorias = {
        'pdf': "Documentos de Texto/Leitura", 'epub': "Documentos de Texto/Leitura",
        'mobi': "Documentos de Texto/Leitura", 'doc': "Documentos de Texto/Leitura",
        'docx': "Documentos de Texto/Leitura", 'txt': "Documentos de Texto/Leitura",
        'rtf': "Documentos de Texto/Leitura", 'odt': "Documentos de Texto/Leitura",
        'html': "Documentos de Texto/Leitura", 'xml': "Documentos de Texto/Leitura",

        'jpg': "Imagens", 'jpeg': "Imagens", 'png': "Imagens", 'gif': "Imagens",
        'tiff': "Imagens", 'bmp': "Imagens", 'svg': "Imagens",

        'mp3': "Áudio", 'wav': "Áudio", 'aac': "Áudio", 'flac': "Áudio", 'ogg': "Áudio",

        'mp4': "Vídeo", 'avi': "Vídeo", 'mov': "Vídeo", 'wmv': "Vídeo", 'flv': "Vídeo",

        'xls': "Dados/Planilhas", 'xlsx': "Dados/Planilhas", 'csv': "Dados/Planilhas",
        'json': "Dados/Planilhas", 'sqlite': "Dados/Planilhas",

        'ppt': "Apresentações", 'pptx': "Apresentações", 'odp': "Apresentações",

        'py': "Programação/Código", 'java': "Programação/Código", 'c': "Programação/Código",
        'cpp': "Programação/Código", 'h': "Programação/Código", 'sh': "Programação/Código",
        'r': "Programação/Código", 'js': "Programação/Código", 'css': "Programação/Código",

        'zip': "Compactados", 'rar': "Compactados", '7z': "Compactados", 'tar': "Compactados",
        'gz': "Compactados",

        # Adicione outras extensões comuns em bibliotecas universitárias, se desejar
        'psd': "Outros/Design", # Photoshop
        'ai':  "Outros/Design",  # Illustrator
        'dwg': "Outros/Engenharia/CAD", # CAD
        'md':  "Documentos de Texto/Leitura",  # Markdown
        'log': "Outros/Log" # Log de dados/programas
    }

    # Estrutura para armazenar os documentos organizados
    # { 'Categoria': { 'extensao': { ano: [nomes_arquivos], 'sem_ano': [nomes_arquivos] } } }
    biblioteca_organizada = {}

    for nome_arquivo in nomes_arquivos:
        # Extrair a extensão
        partes_nome = nome_arquivo.split('.')
        if len(partes_nome) < 2:
            continue # Ignora arquivos sem extensão
        extensao = partes_nome[-1].lower()

        # Obter a categoria do arquivo
        categoria = mapa_extensoes_categorias.get(extensao, "Outros/Diversos")

        # Extrair o ano de publicação
        ano_publicacao = None
        match_ano = re.search(r'(\d{4})', nome_arquivo)
        if match_ano:
            try:
                ano_publicacao = int(match_ano.group(1))
            except ValueError:
                pass # Caso a extração não seja um número válido

        # Inicializar a estrutura se necessário
        if categoria not in biblioteca_organizada:
            biblioteca_organizada[categoria] = {}
        if extensao not in biblioteca_organizada[categoria]:
            biblioteca_organizada[categoria][extensao] = {}

        # Adicionar o arquivo ao ano ou 'sem_ano'
        if ano_publicacao:
            if ano_publicacao not in biblioteca_organizada[categoria][extensao]:
                biblioteca_organizada[categoria][extensao][ano_publicacao] = []
            biblioteca_organizada[categoria][extensao][ano_publicacao].append(nome_arquivo)
        else:
            if 'sem_ano' not in biblioteca_organizada[categoria][extensao]:
                biblioteca_organizada[categoria][extensao]['sem_ano'] = []
            biblioteca_organizada[categoria][extensao]['sem_ano'].append(nome_arquivo)

    return biblioteca_organizada

# --- Exemplo de Uso ---

# Seus exemplos de nomes de arquivos (mistura de tipos e anos)
meus_documentos_de_exemplo = [
    'Artigo_Neurociencia_Cognitiva_2023.pdf',
    'Revisao_Literatura_Inteligencia_Artificial_IEEE.pdf', # Sem ano
    'Impacto_Mudancas_Climaticas_Agricultura_2021.pdf',
    'Analise_Dados_Big_Data_Jornal_Cientifico_XYZ.pdf', # Sem ano
    'Pesquisa_Qualitativa_Educacao_Revista_Pedagogia_Aplicada_2022.pdf',
    'Metodos_Estatisticos_Ciencias_Sociais_2024.pdf',
    'Desafios_Desenvolvimento_Sustentavel_Artigo_Conferencia.pdf', # Sem ano
    'Tese_Doutorado_Otimizacao_Sistemas_Energeticos_2022.pdf',
    'Dissertacao_Mestrado_Uso_Tecnologia_Educacao_2023.pdf',
    'Tese_Analise_Literaria_Romantismo_Brasileiro_USP.pdf', # Sem ano
    'Dissertacao_Modelagem_Computacional_Farmacologia_2021.pdf',
    'Tese_Impacto_Redes_Sociais_Saude_Mental_2024.pdf',
    'Livro_Introducao_Programacao_Python_2ed_2020.pdf',
    'Historia_Filosofia_Ocidental_Vol_1.epub', # Sem ano
    'Guia_Completo_Marketing_Digital_2019.mobi',
    'Manual_Psicologia_Desenvolvimento.pdf', # Sem ano
    'Fisica_Quantica_Para_Iniciantes.epub', # Sem ano
    'Romance_Classico_Aventura_No_Mar_1985.pdf', # Exemplo de ano antigo
    'Economia_Global_Perspectivas_Futuras_2023.pdf',
    'Culinaria_Regional_Receitas_Tradicionais.pdf', # Sem ano
    'Audio_Aula_Historia_Medicina_2020.mp3',
    'Video_Seminario_Ciencias_Ambientais_2021.mp4',
    'Dados_Pesquisa_Populacional_2022.xlsx',
    'Apresentacao_Projeto_Final_2023.pptx',
    'Código_Fonte_Modelo_Estatistico.py', # Sem ano
    'Relatorio_Anual_Financas_2024.doc',
    'Resumo_Conferencia_Internacional.txt', # Sem ano
    'Imagem_Historica_Cidade_1890.jpg', # Exemplo de imagem com ano
    'Dados_Experimento_Quimica_2023.csv',
    'Projeto_Software_Versao_1.0.zip' # Sem ano
]

# Chamar a função
biblioteca_organizada = organizar_biblioteca_digital(meus_documentos_de_exemplo)

# Imprimir o resultado de forma legível
for categoria, extensoes_dict in biblioteca_organizada.items():
    print(f"\n--- {categoria} ---")
    for extensao, anos_dict in extensoes_dict.items():
        print(f"  Extensão: .{extensao}")
        # Ordenar os anos para uma exibição mais limpa
        anos_ordenados = sorted([ano for ano in anos_dict.keys() if ano != 'sem_ano'])
        if 'sem_ano' in anos_dict:
            anos_ordenados.append('sem_ano') # Coloca 'sem_ano' por último

        for ano in anos_ordenados:
            if ano == 'sem_ano':
                print(f"    - Sem Ano de Publicação:")
            else:
                print(f"    - Ano: {ano}:")
            for documento in anos_dict[ano]:
                print(f"      * {documento}")